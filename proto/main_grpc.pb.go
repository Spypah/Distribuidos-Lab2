// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: proto/main.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GreeterClient interface {
	// Continente -> OMS
	NotificarPersona(ctx context.Context, in *EstadoPersona, opts ...grpc.CallOption) (*Ok, error)
	// OMS -> DataNode
	GuardarNombre(ctx context.Context, in *Persona, opts ...grpc.CallOption) (*Ok, error)
	// OMS -> Datanode
	ObtenerNombre(ctx context.Context, in *IdPersona, opts ...grpc.CallOption) (*NombrePersona, error)
	// ONU -> OMS
	ObtenerLista(ctx context.Context, in *Estado, opts ...grpc.CallOption) (*ListaPersonas, error)
}

type greeterClient struct {
	cc grpc.ClientConnInterface
}

func NewGreeterClient(cc grpc.ClientConnInterface) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) NotificarPersona(ctx context.Context, in *EstadoPersona, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/grpc.Greeter/NotificarPersona", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) GuardarNombre(ctx context.Context, in *Persona, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/grpc.Greeter/GuardarNombre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ObtenerNombre(ctx context.Context, in *IdPersona, opts ...grpc.CallOption) (*NombrePersona, error) {
	out := new(NombrePersona)
	err := c.cc.Invoke(ctx, "/grpc.Greeter/ObtenerNombre", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) ObtenerLista(ctx context.Context, in *Estado, opts ...grpc.CallOption) (*ListaPersonas, error) {
	out := new(ListaPersonas)
	err := c.cc.Invoke(ctx, "/grpc.Greeter/ObtenerLista", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
// All implementations must embed UnimplementedGreeterServer
// for forward compatibility
type GreeterServer interface {
	// Continente -> OMS
	NotificarPersona(context.Context, *EstadoPersona) (*Ok, error)
	// OMS -> DataNode
	GuardarNombre(context.Context, *Persona) (*Ok, error)
	// OMS -> Datanode
	ObtenerNombre(context.Context, *IdPersona) (*NombrePersona, error)
	// ONU -> OMS
	ObtenerLista(context.Context, *Estado) (*ListaPersonas, error)
	mustEmbedUnimplementedGreeterServer()
}

// UnimplementedGreeterServer must be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (UnimplementedGreeterServer) NotificarPersona(context.Context, *EstadoPersona) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NotificarPersona not implemented")
}
func (UnimplementedGreeterServer) GuardarNombre(context.Context, *Persona) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GuardarNombre not implemented")
}
func (UnimplementedGreeterServer) ObtenerNombre(context.Context, *IdPersona) (*NombrePersona, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerNombre not implemented")
}
func (UnimplementedGreeterServer) ObtenerLista(context.Context, *Estado) (*ListaPersonas, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObtenerLista not implemented")
}
func (UnimplementedGreeterServer) mustEmbedUnimplementedGreeterServer() {}

// UnsafeGreeterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GreeterServer will
// result in compilation errors.
type UnsafeGreeterServer interface {
	mustEmbedUnimplementedGreeterServer()
}

func RegisterGreeterServer(s grpc.ServiceRegistrar, srv GreeterServer) {
	s.RegisterService(&Greeter_ServiceDesc, srv)
}

func _Greeter_NotificarPersona_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstadoPersona)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).NotificarPersona(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Greeter/NotificarPersona",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).NotificarPersona(ctx, req.(*EstadoPersona))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_GuardarNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Persona)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).GuardarNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Greeter/GuardarNombre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).GuardarNombre(ctx, req.(*Persona))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ObtenerNombre_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdPersona)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ObtenerNombre(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Greeter/ObtenerNombre",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ObtenerNombre(ctx, req.(*IdPersona))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_ObtenerLista_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Estado)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).ObtenerLista(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Greeter/ObtenerLista",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).ObtenerLista(ctx, req.(*Estado))
	}
	return interceptor(ctx, in, info, handler)
}

// Greeter_ServiceDesc is the grpc.ServiceDesc for Greeter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Greeter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NotificarPersona",
			Handler:    _Greeter_NotificarPersona_Handler,
		},
		{
			MethodName: "GuardarNombre",
			Handler:    _Greeter_GuardarNombre_Handler,
		},
		{
			MethodName: "ObtenerNombre",
			Handler:    _Greeter_ObtenerNombre_Handler,
		},
		{
			MethodName: "ObtenerLista",
			Handler:    _Greeter_ObtenerLista_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/main.proto",
}
